// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { APIResource } from '../core/resource';
import * as Shared from './shared';
import { APIPromise } from '../core/api-promise';
import { CursorPage, type CursorPageParams, PagePromise } from '../core/pagination';
import { RequestOptions } from '../internal/request-options';
import { path } from '../internal/utils/path';

export class AppBuilds extends APIResource {
  /**
   * Creates a new app build
   *
   * Required permissions:
   *
   * - `developer:manage_builds`
   *
   * @example
   * ```ts
   * const appBuild = await client.appBuilds.create({
   *   attachment: {},
   *   checksum: 'checksum',
   *   platform: 'ios',
   * });
   * ```
   */
  create(body: AppBuildCreateParams, options?: RequestOptions): APIPromise<Shared.AppBuild> {
    return this._client.post('/app_builds', { body, ...options });
  }

  /**
   * Retrieves an app build by ID
   *
   * Required permissions:
   *
   * - `developer:manage_builds`
   *
   * @example
   * ```ts
   * const appBuild = await client.appBuilds.retrieve(
   *   'apbu_xxxxxxxxxxxxx',
   * );
   * ```
   */
  retrieve(id: string, options?: RequestOptions): APIPromise<Shared.AppBuild> {
    return this._client.get(path`/app_builds/${id}`, options);
  }

  /**
   * Lists app builds for an app
   *
   * Required permissions:
   *
   * - `developer:manage_builds`
   *
   * @example
   * ```ts
   * // Automatically fetches more pages as needed.
   * for await (const appBuildListResponse of client.appBuilds.list(
   *   { app_id: 'app_xxxxxxxxxxxxxx' },
   * )) {
   *   // ...
   * }
   * ```
   */
  list(
    query: AppBuildListParams,
    options?: RequestOptions,
  ): PagePromise<AppBuildListResponsesCursorPage, AppBuildListResponse> {
    return this._client.getAPIList('/app_builds', CursorPage<AppBuildListResponse>, { query, ...options });
  }

  /**
   * Promotes an app build to production
   *
   * Required permissions:
   *
   * - `developer:manage_builds`
   *
   * @example
   * ```ts
   * const appBuild = await client.appBuilds.promote(
   *   'apbu_xxxxxxxxxxxxx',
   * );
   * ```
   */
  promote(id: string, options?: RequestOptions): APIPromise<Shared.AppBuild> {
    return this._client.post(path`/app_builds/${id}/promote`, options);
  }
}

export type AppBuildListResponsesCursorPage = CursorPage<AppBuildListResponse>;

/**
 * An App Build object representing a build of an application
 */
export interface AppBuildListResponse {
  /**
   * The ID of the app build. It will look like apbu_xxxxx.
   */
  id: string;

  /**
   * This is generated by the client and used to verify the integrity of the file
   * that is submitted. It is a SHA256 hash of the app build file.
   */
  checksum: string;

  /**
   * When this app build was created.
   */
  created_at: string;

  /**
   * The URL to download the app build .zip file.
   */
  file_url: string;

  /**
   * Whether this app build is currently being used in production.
   */
  is_production: boolean;

  /**
   * The platform of the app build (ios, android, web)
   */
  platform: Shared.AppBuildPlatforms;

  /**
   * The review message for the app build, if any. This is populated when the build
   * is rejected and there is a reason specified by the reviewer.
   */
  review_message: string | null;

  /**
   * The status of the app build (draft, approved, rejected, pending, etc)
   */
  status: Shared.AppBuildStatuses;

  /**
   * The supported app view types for the app build. These are the views that the
   * developer has specified that this build supports.
   */
  supported_app_view_types: Array<Shared.AppViewType>;
}

export interface AppBuildCreateParams {
  /**
   * Attachment input for the app build file. This should be an upload in .zip
   * format. The zip should contain at least one main_js_bundle.hbc file and
   * optionally an assets folder next to it.
   */
  attachment: AppBuildCreateParams.Attachment;

  /**
   * Checksum of the app build file. This is generated by the client and used to
   * verify the integrity of the file that is submitted when un-packaged later on a
   * device.
   */
  checksum: string;

  /**
   * The platform of the app build (ios, android, web)
   */
  platform: Shared.AppBuildPlatforms;

  /**
   * The ID of the app to create a build for. By default the current app from the api
   * key is used.
   */
  app_id?: string | null;

  /**
   * Supported app view types for the app build. A build can specify multiple view
   * types, but should only specify ones that its code supports.
   */
  supported_app_view_types?: Array<Shared.AppViewType> | null;
}

export namespace AppBuildCreateParams {
  /**
   * Attachment input for the app build file. This should be an upload in .zip
   * format. The zip should contain at least one main_js_bundle.hbc file and
   * optionally an assets folder next to it.
   */
  export interface Attachment {
    /**
     * The ID of an existing attachment object. Use this when updating a resource and
     * keeping a subset of the attachments. Don't use this unless you know what you're
     * doing.
     */
    id?: string | null;

    /**
     * This ID should be used the first time you upload an attachment. It is the ID of
     * the direct upload that was created when uploading the file to S3 via the
     * mediaDirectUpload mutation.
     */
    direct_upload_id?: string | null;
  }
}

export interface AppBuildListParams extends CursorPageParams {
  /**
   * The ID of the app to filter app builds by
   */
  app_id: string;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * The different platforms an app build can target.
   */
  platform?: Shared.AppBuildPlatforms | null;

  /**
   * The different statuses an AppBuild can be in.
   */
  status?: Shared.AppBuildStatuses | null;
}

export declare namespace AppBuilds {
  export {
    type AppBuildListResponse as AppBuildListResponse,
    type AppBuildListResponsesCursorPage as AppBuildListResponsesCursorPage,
    type AppBuildCreateParams as AppBuildCreateParams,
    type AppBuildListParams as AppBuildListParams,
  };
}
