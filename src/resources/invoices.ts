// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { APIResource } from '../core/resource';
import * as InvoicesAPI from './invoices';
import * as Shared from './shared';
import { APIPromise } from '../core/api-promise';
import { CursorPage, type CursorPageParams, PagePromise } from '../core/pagination';
import { RequestOptions } from '../internal/request-options';
import { path } from '../internal/utils/path';

export class Invoices extends APIResource {
  /**
   * Creates an invoice
   *
   * @example
   * ```ts
   * const invoice = await client.invoices.create({
   *   collection_method: 'send_invoice',
   *   due_date: 1701406800,
   *   plan: {},
   * });
   * ```
   */
  create(body: InvoiceCreateParams, options?: RequestOptions): APIPromise<InvoiceCreateResponse | null> {
    return this._client.post('/invoices', { body, ...options });
  }

  /**
   * Retrieves an invoice by ID or token
   *
   * @example
   * ```ts
   * const invoice = await client.invoices.retrieve(
   *   'inv_xxxxxxxxxxxxxx',
   * );
   * ```
   */
  retrieve(id: string, options?: RequestOptions): APIPromise<Shared.Invoice> {
    return this._client.get(path`/invoices/${id}`, options);
  }

  /**
   * Lists invoices
   *
   * @example
   * ```ts
   * // Automatically fetches more pages as needed.
   * for await (const invoiceListItem of client.invoices.list({
   *   company_id: 'biz_xxxxxxxxxxxxxx',
   * })) {
   *   // ...
   * }
   * ```
   */
  list(
    query: InvoiceListParams,
    options?: RequestOptions,
  ): PagePromise<InvoiceListItemsCursorPage, Shared.InvoiceListItem | null> {
    return this._client.getAPIList('/invoices', CursorPage<Shared.InvoiceListItem | null>, {
      query,
      ...options,
    });
  }

  /**
   * Void an invoice
   *
   * @example
   * ```ts
   * const response = await client.invoices.void(
   *   'inv_xxxxxxxxxxxxxx',
   * );
   * ```
   */
  void(id: string, options?: RequestOptions): APIPromise<InvoiceVoidResponse | null> {
    return this._client.post(path`/invoices/${id}/void`, options);
  }
}

export type InvoiceListItemsCursorPage = CursorPage<Shared.InvoiceListItem | null>;

/**
 * The method of collection for an invoice.
 */
export type CollectionMethod = 'send_invoice' | 'charge_automatically' | null;

/**
 * The available currencies on the platform
 */
export type Currency =
  | 'usd'
  | 'sgd'
  | 'inr'
  | 'aud'
  | 'brl'
  | 'cad'
  | 'dkk'
  | 'eur'
  | 'nok'
  | 'gbp'
  | 'sek'
  | 'chf'
  | 'hkd'
  | 'huf'
  | 'jpy'
  | 'mxn'
  | 'myr'
  | 'pln'
  | 'czk'
  | 'nzd'
  | 'aed'
  | 'eth'
  | 'ape'
  | 'cop'
  | 'ron'
  | 'thb'
  | 'bgn'
  | 'idr'
  | 'dop'
  | 'php'
  | 'try'
  | 'krw'
  | 'twd'
  | 'vnd'
  | 'pkr'
  | 'clp'
  | 'uyu'
  | 'ars'
  | 'zar'
  | 'dzd'
  | 'tnd'
  | 'mad'
  | 'kes'
  | 'kwd'
  | 'jod'
  | 'all'
  | 'xcd'
  | 'amd'
  | 'bsd'
  | 'bhd'
  | 'bob'
  | 'bam'
  | 'khr'
  | 'crc'
  | 'xof'
  | 'egp'
  | 'etb'
  | 'gmd'
  | 'ghs'
  | 'gtq'
  | 'gyd'
  | 'ils'
  | 'jmd'
  | 'mop'
  | 'mga'
  | 'mur'
  | 'mdl'
  | 'mnt'
  | 'nad'
  | 'ngn'
  | 'mkd'
  | 'omr'
  | 'pyg'
  | 'pen'
  | 'qar'
  | 'rwf'
  | 'sar'
  | 'rsd'
  | 'lkr'
  | 'tzs'
  | 'ttd'
  | 'uzs'
  | 'rub'
  | 'btc'
  | null;

/**
 * The different statuses an invoice can be in
 */
export type InvoiceStatus = 'open' | 'paid' | 'past_due' | 'void' | null;

/**
 * Autogenerated return type of CreateInvoice.
 */
export interface InvoiceCreateResponse {
  /**
   * The ID of the checkout job that was created for this invoice.
   */
  checkout_job_id: string | null;

  /**
   * A statement that defines an amount due by a customer.
   */
  invoice: Shared.Invoice | null;
}

/**
 * Represents `true` or `false` values.
 */
export type InvoiceVoidResponse = boolean | null;

export interface InvoiceCreateParams {
  /**
   * The method of collection for this invoice. If using charge_automatically, you
   * must provide a payment_token.
   */
  collection_method: CollectionMethod | null;

  /**
   * The date the invoice is due, if applicable.
   */
  due_date: number;

  /**
   * The properties of the plan to create for this invoice.
   */
  plan: InvoiceCreateParams.Plan;

  /**
   * The properties of the access pass to create for this invoice. Include this if
   * you want to create an invoice for a new product.
   */
  access_pass?: InvoiceCreateParams.AccessPass | null;

  /**
   * The access pass ID to create this invoice for. Include this if you want to
   * create an invoice for an existing product.
   */
  access_pass_id?: string | null;

  /**
   * Whether or not to charge the customer a buyer fee.
   */
  charge_buyer_fee?: boolean | null;

  /**
   * The name of the customer to create this invoice for. This is required if you
   * want to create an invoice for a customer who does not have a member of your
   * company yet.
   */
  customer_name?: string | null;

  /**
   * The email address to create this invoice for. This is required if you want to
   * create an invoice for a user who does not have a member of your company yet.
   */
  email_address?: string | null;

  /**
   * The member ID to create this invoice for. Include this if you want to create an
   * invoice for an existing member. If you do not have a member ID, you must provide
   * an email_address and customer_name.
   */
  member_id?: string | null;

  /**
   * The payment token ID to use for this invoice. If using charge_automatically, you
   * must provide a payment_token.
   */
  payment_token_id?: string | null;
}

export namespace InvoiceCreateParams {
  /**
   * The properties of the plan to create for this invoice.
   */
  export interface Plan {
    /**
     * Whether or not ACH payments are accepted
     */
    ach_payments?: boolean | null;

    /**
     * The respective currency identifier for the plan.
     */
    base_currency?: InvoicesAPI.Currency | null;

    /**
     * The interval at which the plan charges (renewal plans).
     */
    billing_period?: number | null;

    /**
     * Whether or not card payments are accepted
     */
    card_payments?: boolean | null;

    /**
     * Marks whether coinbase commerce payments are/aren't accepted.
     */
    coinbase_commerce_accepted?: boolean | null;

    /**
     * An array of custom field objects.
     */
    custom_fields?: Array<Plan.CustomField> | null;

    /**
     * The description of the plan.
     */
    description?: string | null;

    /**
     * The interval at which the plan charges (expiration plans).
     */
    expiration_days?: number | null;

    /**
     * An additional amount charged upon first purchase.
     */
    initial_price?: number | null;

    /**
     * A personal description or notes section for the business.
     */
    internal_notes?: string | null;

    /**
     * Whether or not to offer a discount to cancel a subscription.
     */
    offer_cancel_discount?: boolean | null;

    /**
     * Marks whether paypal payments are/aren't accepted.
     */
    paypal_accepted?: boolean | null;

    /**
     * Indicates if the plan is a one time payment or recurring.
     */
    plan_type?: 'renewal' | 'one_time' | null;

    /**
     * Marks whether platform balance payments are/aren't accepted.
     */
    platform_balance_accepted?: boolean | null;

    /**
     * The URL to redirect the customer to after purchase.
     */
    redirect_url?: string | null;

    /**
     * This is the release method the business uses to sell this plan.
     */
    release_method?: 'buy_now' | 'waitlist' | 'raffle' | null;

    /**
     * Configurable settings on how this plan is released.
     */
    release_method_settings?: Plan.ReleaseMethodSettings | null;

    /**
     * The amount the customer is charged every billing period.
     */
    renewal_price?: number | null;

    /**
     * The number of payments required before pausing the subscription.
     */
    split_pay_required_payments?: number | null;

    /**
     * Marks whether payments using splitit, a payment processor, are/aren't accepted
     * for the plan.
     */
    splitit_accepted?: boolean | null;

    /**
     * The number of units available for purchase.
     */
    stock?: number | null;

    /**
     * The number of free trial days added before a renewal plan.
     */
    trial_period_days?: number | null;

    /**
     * Limits/doesn't limit the number of units available for purchase.
     */
    unlimited_stock?: boolean | null;

    /**
     * Shows or hides the plan from public/business view.
     */
    visibility?: 'visible' | 'hidden' | 'archived' | 'quick_link' | null;
  }

  export namespace Plan {
    export interface CustomField {
      /**
       * The type of the custom field.
       */
      field_type: 'text';

      /**
       * The name of the custom field.
       */
      name: string;

      /**
       * The ID of the custom field (if being updated)
       */
      id?: string | null;

      /**
       * The order of the field.
       */
      order?: number | null;

      /**
       * The placeholder value of the field.
       */
      placeholder?: string | null;

      /**
       * Whether or not the field is required.
       */
      required?: boolean | null;
    }

    /**
     * Configurable settings on how this plan is released.
     */
    export interface ReleaseMethodSettings {
      /**
       * When the raffle will expire
       */
      expires_at?: number | null;

      /**
       * The maximum number of entries allowed for the raffle or waitlist
       */
      max_entries?: number | null;

      /**
       * If this is enabled, the raffle will get entries based off of how many NFTs the
       * user owns
       */
      nft_weighted_entries?: boolean | null;

      /**
       * When the raffle will start
       */
      starts_at?: number | null;
    }
  }

  /**
   * The properties of the access pass to create for this invoice. Include this if
   * you want to create an invoice for a new product.
   */
  export interface AccessPass {
    /**
     * The title of the access pass.
     */
    title: string;

    /**
     * The ID of the product tax code to apply to this access pass.
     */
    product_tax_code_id?: string | null;
  }
}

export interface InvoiceListParams extends CursorPageParams {
  /**
   * The ID of the company to list invoices for
   */
  company_id: string;

  /**
   * Returns the elements in the list that come before the specified cursor.
   */
  before?: string | null;

  /**
   * The direction to sort the invoices by
   */
  direction?: 'asc' | 'desc' | null;

  /**
   * The filters to apply to the invoices
   */
  filters?: InvoiceListParams.Filters | null;

  /**
   * Returns the first _n_ elements from the list.
   */
  first?: number | null;

  /**
   * Returns the last _n_ elements from the list.
   */
  last?: number | null;

  /**
   * The order to sort the invoices by
   */
  order?: 'id' | 'created_at' | 'due_date' | null;
}

export namespace InvoiceListParams {
  /**
   * The filters to apply to the invoices
   */
  export interface Filters {
    /**
     * The access pass IDs to filter the invoices by
     */
    access_pass_ids?: Array<string> | null;

    /**
     * The collection methods to filter the invoices by
     */
    collection_methods?: Array<InvoicesAPI.CollectionMethod | null> | null;

    /**
     * The statuses to filter the invoices by
     */
    statuses?: Array<InvoicesAPI.InvoiceStatus | null> | null;
  }
}

export declare namespace Invoices {
  export {
    type CollectionMethod as CollectionMethod,
    type Currency as Currency,
    type InvoiceStatus as InvoiceStatus,
    type InvoiceCreateResponse as InvoiceCreateResponse,
    type InvoiceVoidResponse as InvoiceVoidResponse,
    type InvoiceListItemsCursorPage as InvoiceListItemsCursorPage,
    type InvoiceCreateParams as InvoiceCreateParams,
    type InvoiceListParams as InvoiceListParams,
  };
}
