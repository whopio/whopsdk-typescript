// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { maybeFilter } from '@whop/mcp/filtering';
import { Metadata, asTextContentResult } from '@whop/mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import Whop from '@whop/sdk';

export const metadata: Metadata = {
  resource: 'plans',
  operation: 'read',
  tags: [],
  httpMethod: 'get',
  httpPath: '/plans/{id}',
  operationId: 'retrievePlan',
};

export const tool: Tool = {
  name: 'retrieve_plans',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nRetrieves a plan by ID\n\nRequired permissions:\n - `plan:basic:read`\n\n# Response Schema\n```json\n{\n  $ref: '#/$defs/plan',\n  $defs: {\n    plan: {\n      type: 'object',\n      description: 'An object representing a (sanitized) plan of an access pass.',\n      properties: {\n        id: {\n          type: 'string',\n          description: 'The internal ID of the plan.'\n        },\n        billing_period: {\n          type: 'integer',\n          description: 'The interval at which the plan charges (renewal plans).'\n        },\n        collect_tax: {\n          type: 'boolean',\n          description: 'Whether or not the plan collects tax.'\n        },\n        company: {\n          type: 'object',\n          description: 'The company for the plan.',\n          properties: {\n            id: {\n              type: 'string',\n              description: 'The ID (tag) of the company.'\n            },\n            title: {\n              type: 'string',\n              description: 'The title of the company.'\n            }\n          },\n          required: [            'id',\n            'title'\n          ]\n        },\n        created_at: {\n          type: 'string',\n          description: 'When the plan was created.',\n          format: 'date-time'\n        },\n        currency: {\n          $ref: '#/$defs/currency'\n        },\n        custom_fields: {\n          type: 'array',\n          description: 'The custom fields for the plan.',\n          items: {\n            type: 'object',\n            description: 'An object representing a custom field for a plan.',\n            properties: {\n              id: {\n                type: 'string',\n                description: 'The internal ID of the given custom field'\n              },\n              field_type: {\n                type: 'string',\n                description: 'What type of input field to use.',\n                enum: [                  'text'\n                ]\n              },\n              name: {\n                type: 'string',\n                description: 'The title/header of the custom field.'\n              },\n              order: {\n                type: 'integer',\n                description: 'How the custom field should be ordered when rendered on the checkout page.'\n              },\n              placeholder: {\n                type: 'string',\n                description: 'An example response displayed in the input field.'\n              },\n              required: {\n                type: 'boolean',\n                description: 'Whether or not the custom field is required.'\n              }\n            },\n            required: [              'id',\n              'field_type',\n              'name',\n              'order',\n              'placeholder',\n              'required'\n            ]\n          }\n        },\n        description: {\n          type: 'string',\n          description: 'The description of the plan.'\n        },\n        expiration_days: {\n          type: 'integer',\n          description: 'The interval at which the plan charges (expiration plans).'\n        },\n        initial_price: {\n          type: 'number',\n          description: 'The price a person has to pay for a plan on the initial purchase.'\n        },\n        internal_notes: {\n          type: 'string',\n          description: 'A personal description or notes section for the business.'\n        },\n        invoice: {\n          type: 'object',\n          description: 'The invoice associated with this plan.',\n          properties: {\n            id: {\n              type: 'string',\n              description: 'The ID of the invoice.'\n            }\n          },\n          required: [            'id'\n          ]\n        },\n        member_count: {\n          type: 'integer',\n          description: 'The number of members for the plan.'\n        },\n        plan_type: {\n          $ref: '#/$defs/plan_type'\n        },\n        product: {\n          type: 'object',\n          description: 'The access pass for the plan.',\n          properties: {\n            id: {\n              type: 'string',\n              description: 'The internal ID of the public product.'\n            },\n            title: {\n              type: 'string',\n              description: 'The title of the product. Use for Whop 4.0.'\n            }\n          },\n          required: [            'id',\n            'title'\n          ]\n        },\n        purchase_url: {\n          type: 'string',\n          description: 'The direct link to purchase the product.'\n        },\n        release_method: {\n          $ref: '#/$defs/release_method'\n        },\n        renewal_price: {\n          type: 'number',\n          description: 'The price a person has to pay for a plan on the renewal purchase.'\n        },\n        stock: {\n          type: 'integer',\n          description: 'The number of units available for purchase. Only displayed to authorized actors'\n        },\n        tax_type: {\n          $ref: '#/$defs/tax_type'\n        },\n        title: {\n          type: 'string',\n          description: 'The title of the plan. This will be visible on the product page to customers.'\n        },\n        trial_period_days: {\n          type: 'integer',\n          description: 'The number of free trial days added before a renewal plan.'\n        },\n        unlimited_stock: {\n          type: 'boolean',\n          description: 'Limits/doesn\\'t limit the number of units available for purchase.'\n        },\n        updated_at: {\n          type: 'string',\n          description: 'When the plan was last updated.',\n          format: 'date-time'\n        },\n        visibility: {\n          $ref: '#/$defs/visibility'\n        }\n      },\n      required: [        'id',\n        'billing_period',\n        'collect_tax',\n        'company',\n        'created_at',\n        'currency',\n        'custom_fields',\n        'description',\n        'expiration_days',\n        'initial_price',\n        'internal_notes',\n        'invoice',\n        'member_count',\n        'plan_type',\n        'product',\n        'purchase_url',\n        'release_method',\n        'renewal_price',\n        'stock',\n        'tax_type',\n        'title',\n        'trial_period_days',\n        'unlimited_stock',\n        'updated_at',\n        'visibility'\n      ]\n    },\n    currency: {\n      type: 'string',\n      description: 'The available currencies on the platform',\n      enum: [        'usd',\n        'sgd',\n        'inr',\n        'aud',\n        'brl',\n        'cad',\n        'dkk',\n        'eur',\n        'nok',\n        'gbp',\n        'sek',\n        'chf',\n        'hkd',\n        'huf',\n        'jpy',\n        'mxn',\n        'myr',\n        'pln',\n        'czk',\n        'nzd',\n        'aed',\n        'eth',\n        'ape',\n        'cop',\n        'ron',\n        'thb',\n        'bgn',\n        'idr',\n        'dop',\n        'php',\n        'try',\n        'krw',\n        'twd',\n        'vnd',\n        'pkr',\n        'clp',\n        'uyu',\n        'ars',\n        'zar',\n        'dzd',\n        'tnd',\n        'mad',\n        'kes',\n        'kwd',\n        'jod',\n        'all',\n        'xcd',\n        'amd',\n        'bsd',\n        'bhd',\n        'bob',\n        'bam',\n        'khr',\n        'crc',\n        'xof',\n        'egp',\n        'etb',\n        'gmd',\n        'ghs',\n        'gtq',\n        'gyd',\n        'ils',\n        'jmd',\n        'mop',\n        'mga',\n        'mur',\n        'mdl',\n        'mnt',\n        'nad',\n        'ngn',\n        'mkd',\n        'omr',\n        'pyg',\n        'pen',\n        'qar',\n        'rwf',\n        'sar',\n        'rsd',\n        'lkr',\n        'tzs',\n        'ttd',\n        'uzs',\n        'rub',\n        'btc'\n      ]\n    },\n    plan_type: {\n      type: 'string',\n      description: 'The type of plan that can be attached to an access pass',\n      enum: [        'renewal',\n        'one_time'\n      ]\n    },\n    release_method: {\n      type: 'string',\n      description: 'The methods of how a plan can be released.',\n      enum: [        'buy_now',\n        'waitlist'\n      ]\n    },\n    tax_type: {\n      type: 'string',\n      description: 'Whether or not the tax is included in a plan\\'s price (or if it hasn\\'t been set up)',\n      enum: [        'inclusive',\n        'exclusive',\n        'unspecified'\n      ]\n    },\n    visibility: {\n      type: 'string',\n      description: 'Visibility of a resource',\n      enum: [        'visible',\n        'hidden',\n        'archived',\n        'quick_link'\n      ]\n    }\n  }\n}\n```",
  inputSchema: {
    type: 'object',
    properties: {
      id: {
        type: 'string',
      },
      jq_filter: {
        type: 'string',
        title: 'jq Filter',
        description:
          'A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide ".results[].name".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/).',
      },
    },
    required: ['id'],
  },
  annotations: {
    readOnlyHint: true,
  },
};

export const handler = async (client: Whop, args: Record<string, unknown> | undefined) => {
  const { id, jq_filter, ...body } = args as any;
  return asTextContentResult(await maybeFilter(jq_filter, await client.plans.retrieve(id)));
};

export default { metadata, tool, handler };
